{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/dropdown-menu/dropdown-menu.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/option/option.ts","webpack:///./src/app/components/register/register-response/registerResponse.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/components/response/response.component.css","webpack:///./src/app/components/response/response.component.html","webpack:///./src/app/components/response/response.component.ts","webpack:///./src/app/components/tom/newTom.ts","webpack:///./src/app/components/tom/tom.ts","webpack:///./src/app/components/topic-list/topic-list.component.css","webpack:///./src/app/components/topic-list/topic-list.component.html","webpack:///./src/app/components/topic-list/topic-list.component.ts","webpack:///./src/app/routes.ts","webpack:///./src/app/services/register-tom.service.ts","webpack:///./src/app/services/tom.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\" style=padding-top:50px>\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\\r\\n\"","import { Component } from 'node_modules/@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'tom-angular';\r\n}\r\n","import { TomService } from './services/tom.service';\r\nimport { ResponseComponent } from './components/response/response.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { appRoutes } from './routes';\r\nimport { BrowserModule } from 'node_modules/@angular/platform-browser';\r\nimport { NgModule } from 'node_modules/@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { FormsModule } from 'node_modules/@angular/forms';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TopicListComponent } from './components/topic-list/topic-list.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RegisterTomService } from './services/register-tom.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    HomeComponent,\r\n    ResponseComponent,\r\n    TopicListComponent,\r\n    RegisterComponent,\r\n    NavbarComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    HttpClientModule\r\n  ],\r\n  providers: [TomService,RegisterTomService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export class DropdownMenu{\r\n    constructor(\r\n        public name:string\r\n    ){}\r\n}","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n    <a class=\\\"navbar-brand\\\" \\r\\n      style=\\\"color:whitesmoke\\\">\\r\\n         AskTOM    </a>\\r\\n    <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n    </ul>\\r\\n    <li class=\\\"nav-item dropdown\\\">\\r\\n      <a class=\\\"nav-link dropdown-toggle\\\" \\r\\n        role=\\\"button\\\" \\r\\n        data-toggle=\\\"dropdown\\\" \\r\\n        aria-haspopup=\\\"true\\\" \\r\\n        style=\\\"color:whitesmoke\\\"\\r\\n        aria-expanded=\\\"false\\\">\\r\\n        Menu\\r\\n      </a>\\r\\n      <div class=\\\"dropdown-menu\\\" \\r\\n        aria-labelledby=\\\"navbarDropdown\\\">\\r\\n        <a class=\\\"dropdown-item\\\" \\r\\n          ></a>\\r\\n      </div>\\r\\n    </li>\\r\\n  </nav>\\r\\n<!-- NAVBAR END -->\\r\\n<p>\\r\\n  home-work(s)!\\r\\n</p>\\r\\n<div *ngFor=\\\"let topic of topics\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"col-sm-3\\\"></div>\\r\\n        <div class=\\\"col-sm-6\\\">{{topic.name}}</div>\\r\\n        <div class=\\\"col-sm-3\\\"></div>\\r\\n      </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\"","import { NavbarComponent } from './../navbar/navbar.component';\r\nimport { Topic } from './topic/topic';\r\nimport { TomService } from './../../services/tom.service';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  topics:Topic[] = [];\r\n\r\n  constructor(/*private tomService:TomService*/) { }\r\n\r\n  ngOnInit() {\r\n   /* this.tomService\r\n      .getTopics()\r\n      .subscribe(\r\n        data => {\r\n          this.topics = data;\r\n        },\r\n        error => {\r\n          console.log(error.message);\r\n        }\r\n      );\r\n      */\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n        <a class=\\\"navbar-brand\\\" \\r\\n          style=\\\"color:whitesmoke\\\">\\r\\n             AskTOM    </a>\\r\\n        <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n        </ul>\\r\\n        <li class=\\\"nav-item dropdown\\\">\\r\\n          <a class=\\\"nav-link dropdown-toggle\\\" \\r\\n            role=\\\"button\\\" \\r\\n            data-toggle=\\\"dropdown\\\" \\r\\n            aria-haspopup=\\\"true\\\" \\r\\n            style=\\\"color:whitesmoke\\\"\\r\\n            aria-expanded=\\\"false\\\">\\r\\n            Menu\\r\\n          </a>\\r\\n          <div class=\\\"dropdown-menu\\\" \\r\\n            aria-labelledby=\\\"navbarDropdown\\\">\\r\\n            <a class=\\\"dropdown-item\\\" \\r\\n              ></a>\\r\\n          </div>\\r\\n        </li>\\r\\n      </nav>\\r\\n    <!-- NAVBAR END -->\\r\\n\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  \\r\\n  <div class=\\\"d-flex justify-content-center\\\">\\r\\n    <h1>Welcome to AskTOM</h1>\\r\\n  </div>\\r\\n    <br>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-3\\\"></div>\\r\\n      <div class=\\\"col-6\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n              Username:<input type=\\\"text\\\" \\r\\n              class=\\\"form-control\\\" \\r\\n              [(ngModel)]=newTom.username required>\\r\\n          </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-3\\\"></div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-3\\\"></div>\\r\\n      <div class=\\\"col-6\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            Password:<input type=\\\"password\\\" \\r\\n            class=\\\"form-control\\\"\\r\\n            [(ngModel)]=newTom.password required>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-3\\\"></div>\\r\\n    </div>\\r\\n    <br>\\r\\n    <!-- for a single button in the middle of a row -->\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\"></div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <button class=\\\"btn-primary\\\" (click)=\\\"addTom()\\\"><span>Login</span></button>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\"></div>\\r\\n    </div>\\r\\n    <br>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-4\\\"></div>\\r\\n      <div class=\\\"col-4\\\">\\r\\n          <nav><a routerLink=\\\"/register\\\" routerLinkActive=\\\"active\\\">\\r\\n          <button class=\\\"btn-primary\\\"><span>Register</span></button>\\r\\n          </a></nav>\\r\\n      </div>\\r\\n      <div class=\\\"col-4\\\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\"","import { NavbarComponent } from './../navbar/navbar.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Tom } from '../tom/tom';\r\nimport { Option } from '../option/option';\r\nimport { Router } from '@angular/router';\r\nimport { TomService } from 'src/app/services/tom.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  newTom:Tom = new Tom(\"\",\"\",2);\r\n\r\n  option:Option={id:1,name:\"true\"};\r\n  options:Option[]=[\r\n    {id:1, name: \"Info\"}\r\n  ];\r\n\r\n  addTom(){\r\n    new Tom(\r\n      this.newTom.username,\r\n      this.newTom.password,\r\n      this.newTom.privId\r\n    )\r\n    \r\n    this.loginTom.getTom(\r\n      this.newTom.username,\r\n      this.newTom.password\r\n    ).subscribe(\r\n      data => {\r\n        /**\r\n         * Pass result to home with a \r\n         * logged-in user \r\n         */\r\n        if(data != null){\r\n          this.router.navigateByUrl('/home');\r\n        }\r\n      },\r\n      error => {\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  constructor(private loginTom:TomService,\r\n    private router:Router) { }\r\n\r\n  ngOnInit() {\r\n    this.option;\r\n    this.options;\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n    <a class=\\\"navbar-brand\\\" \\r\\n      style=\\\"color:whitesmoke\\\">\\r\\n         AskTOM    </a>\\r\\n    <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n    </ul>\\r\\n    <li class=\\\"nav-item dropdown\\\">\\r\\n      <a class=\\\"nav-link dropdown-toggle\\\" \\r\\n        role=\\\"button\\\" \\r\\n        data-toggle=\\\"dropdown\\\" \\r\\n        aria-haspopup=\\\"true\\\" \\r\\n        style=\\\"color:whitesmoke\\\"\\r\\n        aria-expanded=\\\"false\\\">\\r\\n        Menu\\r\\n      </a>\\r\\n      <div class=\\\"dropdown-menu\\\" \\r\\n        aria-labelledby=\\\"navbarDropdown\\\">\\r\\n        <a class=\\\"dropdown-item\\\" \\r\\n          ></a>\\r\\n      </div>\\r\\n    </li>\\r\\n  </nav>\\r\\n<!-- NAVBAR END -->\\r\\n<!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\"","import { Component, OnInit, Input } from 'node_modules/@angular/core';\r\nimport { Option } from '../option/option';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\n\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  @Input() option:Option;\r\n\r\n  @Input() options:Option[]=[];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export class Option{\r\n    constructor(\r\n        public id:number,\r\n        public name:string\r\n    ){}\r\n}","export class RegisterResponse{\r\n    constructor(\r\n        public registerSuccess:boolean\r\n    ){}\r\n}","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n    <a class=\\\"navbar-brand\\\" \\r\\n      style=\\\"color:whitesmoke\\\">\\r\\n         AskTOM    </a>\\r\\n    <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n    </ul>\\r\\n    <li class=\\\"nav-item dropdown\\\">\\r\\n      <a class=\\\"nav-link dropdown-toggle\\\" \\r\\n        role=\\\"button\\\" \\r\\n        data-toggle=\\\"dropdown\\\" \\r\\n        aria-haspopup=\\\"true\\\" \\r\\n        style=\\\"color:whitesmoke\\\"\\r\\n        aria-expanded=\\\"false\\\">\\r\\n        Menu\\r\\n      </a>\\r\\n      <div class=\\\"dropdown-menu\\\" \\r\\n        aria-labelledby=\\\"navbarDropdown\\\">\\r\\n        <a class=\\\"dropdown-item\\\" \\r\\n          ></a>\\r\\n      </div>\\r\\n    </li>\\r\\n  </nav>\\r\\n  \\r\\n<!-- NAVBAR END -->\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"d-flex justify-content-center\\\">\\r\\n    <h1>Please Register</h1>\\r\\n  </div>\\r\\n      <!-- Userame -->\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n              Username:<input type=\\\"text\\\" \\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"register-username\\\"\\r\\n              [(ngModel)]=addNewTom.username required>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n      </div>\\r\\n      <!-- Password -->\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n          Password:\\r\\n          <input type=\\\"password\\\"\\r\\n                class=\\\"form-control\\\" \\r\\n                id=\\\"register-password\\\"\\r\\n                [(ngModel)]=addNewTom.password required>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n      </div>\\r\\n      <!-- Confirm Password -->\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n          Confirm Password:\\r\\n          <input type=\\\"password\\\" \\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"register-password-confirm\\\"\\r\\n              [(ngModel)]=addNewTom.passwordConfirm required>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n      </div>\\r\\n      <br>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n          <div ngbDropdown>\\r\\n            <button class=\\\"btn btn-outline-primary\\\" id=\\\"dropdownBasic1\\\" ngbDropdownToggle><span>{{privileges.name}}</span></button>\\r\\n            <div ngbDropdownMenu aria-labelledby=\\\"dropdownBasic1\\\">\\r\\n              <button *ngFor=\\\"let option of options\\\" (click)=setDropdownText(option.name) class=\\\"btn dropdown-item text-center\\\"><span>{{option.name}}</span></button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n      </div>\\r\\n      <br>\\r\\n      <br>\\r\\n  <!-- for a single button in the middle of a row -->\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-4\\\">\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n      <nav><a routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">\\r\\n      <button class=\\\"btn-primary text-center\\\"><span>Confirm</span></button>\\r\\n      </a></nav>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n      <nav><a routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">\\r\\n      <button class=\\\"btn-default\\\"><span>Cancel</span></button>\\r\\n      </a></nav>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\\r\\n\"","import { RegisterTomService } from './../../services/register-tom.service';\r\nimport { Option } from './../option/option';\r\nimport { DropdownMenu } from './../dropdown-menu/dropdown-menu';\r\nimport { Tom } from './../tom/tom';\r\nimport { NavbarComponent } from './../navbar/navbar.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NewTom } from '../tom/newTom';\r\nimport { RegisterResponse } from './register-response/registerResponse';\r\n@Component({\r\n  selector: '[app-register],[ngbd-dropdown-basic]',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  \r\n  feedback:RegisterResponse = new RegisterResponse(false);\r\n  newTom:Tom = new Tom(\"\",\"\",0);\r\n  addNewTom:NewTom = new NewTom(\"\",\"\",\"\",0);\r\n\r\n  privileges:DropdownMenu = new DropdownMenu(\"Privilege Level\");\r\n\r\n  options:Option[] = [\r\n    {id:1, name:\"Admin\"},\r\n    {id:2, name:\"User\"}\r\n  ];\r\n\r\n  setDropdownText(name:string){\r\n    this.privileges.name = name;\r\n  }\r\n\r\n  constructor(private registerTomService:RegisterTomService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  addTom(){\r\n    for(var item of this.options){\r\n      if(item.name == this.privileges.name){\r\n        this.addNewTom.privId = item.id;\r\n      }\r\n    }\r\n    \r\n    if(this.addNewTom.privId != 0){\r\n      if(this.addNewTom.password == this.addNewTom.passwordConfirm){\r\n        new NewTom(\r\n          this.addNewTom.username,\r\n          this.addNewTom.password,\r\n          this.addNewTom.passwordConfirm,\r\n          this.addNewTom.privId\r\n        )\r\n\r\n        this.registerTomService.addFreshNewTom( this.addNewTom.username,\r\n          this.addNewTom.password,\r\n          this.addNewTom.passwordConfirm,\r\n          this.addNewTom.privId).subscribe(\r\n            data=>{\r\n              /* \r\n                Route back to login \r\n                AND \r\n                at login, \r\n                notify user of result w/ an HTML message\r\n              */\r\n             this.feedback = data;\r\n             if(this.feedback){\r\n              \r\n             } else {\r\n\r\n             }\r\n            },\r\n            error=>{\r\n              console.log(error.message);\r\n            }\r\n          );\r\n\r\n      } else {\r\n        /* */\r\n      }\r\n    } else {\r\n      \r\n    }\r\n  }\r\n\r\n  checkPrivSelection(name:string){\r\n\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n      <a class=\\\"navbar-brand\\\" \\r\\n        style=\\\"color:whitesmoke\\\">\\r\\n           AskTOM    </a>\\r\\n      <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n      </ul>\\r\\n      <li class=\\\"nav-item dropdown\\\">\\r\\n        <a class=\\\"nav-link dropdown-toggle\\\" \\r\\n          role=\\\"button\\\" \\r\\n          data-toggle=\\\"dropdown\\\" \\r\\n          aria-haspopup=\\\"true\\\" \\r\\n          style=\\\"color:whitesmoke\\\"\\r\\n          aria-expanded=\\\"false\\\">\\r\\n          Menu\\r\\n        </a>\\r\\n        <div class=\\\"dropdown-menu\\\" \\r\\n          aria-labelledby=\\\"navbarDropdown\\\">\\r\\n          <a class=\\\"dropdown-item\\\"\\r\\n            ></a>\\r\\n        </div>\\r\\n      </li>\\r\\n    </nav>\\r\\n  <!-- NAVBAR END -->\\r\\n  <!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n  <nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\\r\\n\\r\\n<p>\\r\\n  response works!\\r\\n</p>\\r\\n<div *ngFor=\\\"let response of responses\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"col-sm-2\\\">{{response.votes}}</div>\\r\\n        <div class=\\\"col-sm-8\\\">{{response.content}}</div>\\r\\n        <div class=\\\"col-sm-2\\\"></div>\\r\\n      </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { NavbarComponent } from '../navbar/navbar.component';\r\nimport { Response } from './response/response';\r\n\r\n@Component({\r\n  selector: 'app-response',\r\n  templateUrl: './response.component.html',\r\n  styleUrls: ['./response.component.css']\r\n})\r\nexport class ResponseComponent implements OnInit {\r\n\r\n  responses:Response[]=[\r\n  ]\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export class NewTom {\r\n    constructor(\r\n        public username:string,\r\n        public password:string,\r\n        public passwordConfirm:string,\r\n        public privId:number\r\n    ){}\r\n}","export class Tom {\r\n    constructor(\r\n        public username:string,\r\n        public password:string,\r\n        public privId:number\r\n    ){}\r\n}","module.exports = \"\"","module.exports = \"\\r\\n<div class=\\\"container\\\">\\r\\n  <div class=\\\"col-sm-3\\\"></div>\\r\\n  <div class=\\\"col-sm-6\\\" id=\\\"topic-name\\\" ></div>\\r\\n  <div class=\\\"col-sm-3\\\"></div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-topic-list',\r\n  templateUrl: './topic-list.component.html',\r\n  styleUrls: ['./topic-list.component.css']\r\n})\r\nexport class TopicListComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { LoginComponent } from './components/login/login.component';\r\nimport { Routes } from 'node_modules/@angular/router';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { ResponseComponent } from './components/response/response.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\n\r\nexport const appRoutes: Routes = [\r\n    {\r\n        path: 'register',\r\n        component: RegisterComponent\r\n    },\r\n    {\r\n        path: 'responses',\r\n        component: ResponseComponent\r\n    },\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent\r\n    },\r\n    {\r\n        path: 'home',\r\n        component: HomeComponent\r\n    },\r\n    {\r\n        path: '**',\r\n        redirectTo: 'home',\r\n        pathMatch: 'full'\r\n    },\r\n    {\r\n        path: '',\r\n        component: HomeComponent\r\n    }\r\n]","import { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Tom } from '../components/tom/tom';\r\nimport { RegisterResponse } from '../components/register/register-response/registerResponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterTomService {\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json'})\r\n  }\r\n\r\n  addFreshNewTom(username:string, password:string, passwordConfirm:string, privId:number){\r\n    let body = new HttpParams();\r\n    /* Point to tomcat server */\r\n    let headers = new HttpHeaders().set(\r\n      'Content-Type', 'application/x-www-form-urlencoded'\r\n    );\r\n\r\n      body = body.set('username', username);\r\n      body = body.set('password', password);\r\n      body = body.set('passwordConfirm', passwordConfirm)\r\n      body = body.set('privId', privId.toString());\r\n      /* Point to tomcat server */\r\n    return this.http.post<RegisterResponse>(\"http://loaclhost:8085/AskTOM/RegisterServlet\",\r\n    body,\r\n    {headers:headers});\r\n  }\r\n\r\n  \r\n}\r\n","import { ActiveTom } from './../components/tom/activeTom';\r\nimport { Topic } from './../components/home/topic/topic';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TomService {\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json'})\r\n  }\r\n\r\n  getTopics(){\r\n    return this.http.get<Topic[]>(\"http://localhost:8085/AskTOM/GetTopics\");\r\n  }\r\n  \r\n  getTom(username:string, password:string){\r\n    let body = new HttpParams();\r\n    /* Point to tomcat server */\r\n    let headers = new HttpHeaders().set(\r\n      'Content-Type', 'application/x-www-form-urlencoded'\r\n    );\r\n\r\n      body = body.set('username', username);\r\n      body = body.set('password', password);\r\n      /* Point to tomcat server */\r\n    return this.http.post<ActiveTom>(\"http://localhost:8085/AskTOM/LoginServlet\",\r\n    body,\r\n    {headers:headers});\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n\r\n"],"sourceRoot":""}