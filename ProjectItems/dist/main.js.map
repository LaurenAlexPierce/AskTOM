{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/dropdown-menu/dropdown-menu.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/home/topic/topic.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/register/register-response/registerResponse.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/components/response/response.component.css","webpack:///./src/app/components/response/response.component.html","webpack:///./src/app/components/response/response.component.ts","webpack:///./src/app/components/tom/activeTom.ts","webpack:///./src/app/components/tom/newTom.ts","webpack:///./src/app/components/tom/tom.ts","webpack:///./src/app/components/topic-list/topic-list.component.css","webpack:///./src/app/components/topic-list/topic-list.component.html","webpack:///./src/app/components/topic-list/topic-list.component.ts","webpack:///./src/app/routes.ts","webpack:///./src/app/services/register-tom.service.ts","webpack:///./src/app/services/response.service.ts","webpack:///./src/app/services/tom.service.ts","webpack:///./src/app/services/topic-to-response.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\" style=padding-top:50px>\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\\r\\n\"","import { Component } from 'node_modules/@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'tom-angular';\r\n}\r\n","import { TomService } from './services/tom.service';\r\nimport { ResponseComponent } from './components/response/response.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { appRoutes } from './routes';\r\nimport { BrowserModule } from 'node_modules/@angular/platform-browser';\r\nimport { NgModule } from 'node_modules/@angular/core';\r\nimport { LoggerModule, NgxLoggerLevel } from 'ngx-logger';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { FormsModule } from 'node_modules/@angular/forms';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TopicListComponent } from './components/topic-list/topic-list.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RegisterTomService } from './services/register-tom.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    HomeComponent,\r\n    ResponseComponent,\r\n    TopicListComponent,\r\n    RegisterComponent,\r\n    NavbarComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    HttpClientModule,\r\n    LoggerModule.forRoot({serverLoggingUrl: '/api/logs', level: NgxLoggerLevel.DEBUG, serverLogLevel: NgxLoggerLevel.ERROR})\r\n  ],\r\n  providers: [TomService,RegisterTomService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export class DropdownMenu{\r\n    constructor(\r\n        public name:string\r\n    ){}\r\n}","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n    <a class=\\\"navbar-brand\\\" \\r\\n      style=\\\"color:whitesmoke\\\">\\r\\n         AskTOM    </a>\\r\\n    <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n    </ul>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-10\\\"></div>\\r\\n        <div class=\\\"col-2\\\">\\r\\n          \\r\\n          <span><a routerLinkActive=\\\"active\\\" routerLink=\\\"/login\\\">Login</a> <a *ngIf=\\\"signedOn()\\\">Logout</a></span>\\r\\n         \\r\\n        </div>\\r\\n    </div>\\r\\n  </nav>\\r\\n<!-- NAVBAR END -->\\r\\n  <div class=\\\"container card-deck\\\">\\r\\n    <div *ngFor=\\\"let topic of topics\\\">\\r\\n        <div class=\\\"row cardSection\\\" (click)=\\\"loadResponses(topic)\\\">\\r\\n          <div class = \\\"col-sm-3 card-body\\\" >\\r\\n                 <p class=\\\"text center card-text\\\"> {{topic.name}}</p>\\r\\n          </div>\\r\\n         </div>\\r\\n      </div>\\r\\n  </div>\\r\\n\\r\\n\\r\\n<!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\"","import { appRoutes } from './../../routes';\r\nimport { NavbarComponent } from './../navbar/navbar.component';\r\nimport { Topic } from './topic/topic';\r\nimport { TomService } from './../../services/tom.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TopicToResponseService } from 'src/app/services/topic-to-response.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  topics:Topic[] = [];\r\n\r\n  topicSelect:Topic;\r\n\r\n  constructor(private tomService:TomService,\r\n    private router:Router,\r\n    private data: TopicToResponseService) { \r\n    }\r\n\r\n  goToLogin(){\r\n    \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.tomService\r\n      .getTopics()\r\n      .subscribe(\r\n        data => {\r\n          // get the topics. \r\n          console.log('In ngOnInit in home. Successful get topics.', data);\r\n          this.topics = data;\r\n        },\r\n        error => {\r\n          // Log the error\r\n          console.log(error.message);\r\n        }\r\n      );\r\n\r\n      // this is the key service for listening to \r\n      // topic selection for sending to the topics \r\n      // component\r\n    this.data.currentTopic.subscribe(\r\n      data => {\r\n        console.trace('inside the ngOnInit data service call instantiation.');\r\n        // listen for changes to current topic\r\n      }\r\n    )\r\n  }\r\n\r\n  // Load \r\n  loadResponses(topic:Topic){\r\n    console.trace('Entered load responses.');\r\n    console.debug('contents of topicSelect: ' + topic.name);\r\n    this.data.changeTopic(topic);\r\n    console.warn('About to route to response');\r\n    this.router.navigateByUrl('/responses');\r\n  }\r\n\r\n  signedOn(){\r\n    // this is where we handle the logout by invalidating the user from service.\r\n\r\n  }\r\n}\r\n\r\n","export class Topic {\r\n\r\n    constructor(\r\n        public id:number,\r\n        public name:string,\r\n        public privId:number\r\n        ){}\r\n}","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n        <a class=\\\"navbar-brand\\\" \\r\\n          style=\\\"color:whitesmoke\\\">\\r\\n             AskTOM    </a>\\r\\n        <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n        </ul>\\r\\n    </nav>\\r\\n    <!-- NAVBAR END -->\\r\\n\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  <p>{{message}}</p>\\r\\n  <div class=\\\"d-flex justify-content-center\\\">\\r\\n    <h1>Welcome to AskTOM</h1>\\r\\n  </div>\\r\\n    <br>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-3\\\"></div>\\r\\n      <div class=\\\"col-6\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n              Username:<input type=\\\"text\\\" \\r\\n              class=\\\"form-control\\\" \\r\\n              [(ngModel)]=newTom.username required>\\r\\n          </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-3\\\"></div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-3\\\"></div>\\r\\n      <div class=\\\"col-6\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            Password:<input type=\\\"password\\\" \\r\\n            class=\\\"form-control\\\"\\r\\n            [(ngModel)]=newTom.password required>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-3\\\"></div>\\r\\n    </div>\\r\\n    <br>\\r\\n    <!-- for a single button in the middle of a row -->\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\"></div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <button class=\\\"btn-primary\\\" (click)=\\\"addTom()\\\"><span>Login</span></button>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\"></div>\\r\\n    </div>\\r\\n    <br>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-4\\\"></div>\\r\\n      <div class=\\\"col-4\\\">\\r\\n          <nav><a routerLink=\\\"/register\\\" routerLinkActive=\\\"active\\\">\\r\\n          <button class=\\\"btn-primary\\\"><span>Register</span></button>\\r\\n          </a></nav>\\r\\n      </div>\\r\\n      <div class=\\\"col-4\\\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\"","import { ActiveTom } from './../tom/activeTom';\r\nimport { NavbarComponent } from './../navbar/navbar.component';\r\nimport { Component, OnInit, Output } from '@angular/core';\r\nimport { Tom } from '../tom/tom';\r\nimport { Option } from '../option/option';\r\nimport { Router } from '@angular/router';\r\nimport { TomService } from 'src/app/services/tom.service';\r\nimport { NGXLogger } from 'ngx-logger';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n  providers:[NGXLogger]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  message:string=\"\";\r\n  newTom:Tom = new Tom(\"\",\"\",2);\r\n\r\n  @Output() authenticatedUser:ActiveTom;\r\n\r\n  option:Option={id:1,name:\"true\"};\r\n  options:Option[]=[\r\n    {id:1, name: \"Info\"}\r\n  ];\r\n\r\n  addTom(){\r\n    new Tom(\r\n      this.newTom.username,\r\n      this.newTom.password,\r\n      this.newTom.privId\r\n    )\r\n    \r\n    this.loginTom.getTom(\r\n      this.newTom.username,\r\n      this.newTom.password\r\n    ).subscribe(\r\n      data => {\r\n        /**\r\n         * Pass result to home with a \r\n         * logged-in user \r\n         */\r\n        if(data != null){\r\n          this.router.navigateByUrl('/home');\r\n          console.debug('Data has been received in addTom().', data);\r\n        }\r\n        else{\r\n          console.trace('AddTom() returned null.');\r\n        }\r\n      },\r\n      error => {\r\n        console.trace('Error with request.');\r\n        this.message = \"Something went wrong. Please try again later.\";\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  constructor(private loginTom:TomService,\r\n    private router:Router,\r\n    private logger:NGXLogger) {\r\n      console.debug('Inside LoginComponent Constructor.');\r\n     }\r\n\r\n  ngOnInit() {\r\n    this.option;\r\n    this.options;\r\n    console.debug('Inside ngOnInit in the LoginComponent.');\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n    <a class=\\\"navbar-brand\\\" \\r\\n      style=\\\"color:whitesmoke\\\">\\r\\n         AskTOM    </a>\\r\\n    <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n    </ul>\\r\\n  </nav>\\r\\n<!-- NAVBAR END -->\\r\\n<!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\"","import { Component, OnInit, Input } from 'node_modules/@angular/core';\r\nimport { Option } from '../option/option';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\n\r\nexport class NavbarComponent implements OnInit {\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export class RegisterResponse{\r\n    constructor(\r\n        public registerSuccess:boolean\r\n    ){}\r\n}","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n    <a class=\\\"navbar-brand\\\" \\r\\n      style=\\\"color:whitesmoke\\\">\\r\\n         AskTOM    </a>\\r\\n    <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n    </ul>\\r\\n    <li class=\\\"nav-item dropdown\\\">\\r\\n      <a class=\\\"nav-link dropdown-toggle\\\" \\r\\n        role=\\\"button\\\" \\r\\n        data-toggle=\\\"dropdown\\\" \\r\\n        aria-haspopup=\\\"true\\\" \\r\\n        style=\\\"color:whitesmoke\\\"\\r\\n        aria-expanded=\\\"false\\\">\\r\\n        Menu\\r\\n      </a>\\r\\n      <div class=\\\"dropdown-menu\\\" \\r\\n        aria-labelledby=\\\"navbarDropdown\\\">\\r\\n        <a class=\\\"dropdown-item\\\" \\r\\n          ></a>\\r\\n      </div>\\r\\n    </li>\\r\\n  </nav>\\r\\n  \\r\\n<!-- NAVBAR END -->\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"d-flex justify-content-center\\\">\\r\\n    <h1>Please Register</h1>\\r\\n  </div>\\r\\n      <!-- Userame -->\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n              Username:<input type=\\\"text\\\" \\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"register-username\\\"\\r\\n              [(ngModel)]=addNewTom.username required>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n      </div>\\r\\n      <!-- Password -->\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n          Password:\\r\\n          <input type=\\\"password\\\"\\r\\n                class=\\\"form-control\\\" \\r\\n                id=\\\"register-password\\\"\\r\\n                [(ngModel)]=addNewTom.password required>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n      </div>\\r\\n      <!-- Confirm Password -->\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n          Confirm Password:\\r\\n          <input type=\\\"password\\\" \\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"register-password-confirm\\\"\\r\\n              [(ngModel)]=addNewTom.passwordConfirm required>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n      </div>\\r\\n      <br>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n          <div ngbDropdown>\\r\\n            <button class=\\\"btn btn-outline-primary\\\" id=\\\"dropdownBasic1\\\" ngbDropdownToggle><span>{{privileges.name}}</span></button>\\r\\n            <div ngbDropdownMenu aria-labelledby=\\\"dropdownBasic1\\\">\\r\\n              <button *ngFor=\\\"let option of options\\\" (click)=setDropdownText(option.name) class=\\\"btn dropdown-item text-center\\\" id=\\\"choicedrop\\\"><span>{{option.name}}</span></button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\"></div>\\r\\n      </div>\\r\\n      <br>\\r\\n      <br>\\r\\n  <!-- for a single button in the middle of a row -->\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-4\\\">\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n      <nav><a (click)=\\\"addTom()\\\" routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">\\r\\n      <button class=\\\"btn-primary text-center\\\" ><span>Confirm</span></button>\\r\\n      </a></nav>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n      <nav><a routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">\\r\\n      <button class=\\\"btn-default\\\"><span>Cancel</span></button>\\r\\n      </a></nav>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\">\\r\\n\"","import { RegisterTomService } from './../../services/register-tom.service';\r\nimport { Option } from './../option/option';\r\nimport { DropdownMenu } from './../dropdown-menu/dropdown-menu';\r\nimport { Tom } from './../tom/tom';\r\nimport { NavbarComponent } from './../navbar/navbar.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NewTom } from '../tom/newTom';\r\nimport { RegisterResponse } from './register-response/registerResponse';\r\n@Component({\r\n  selector: '[app-register],[ngbd-dropdown-basic]',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  \r\n  feedback:RegisterResponse = new RegisterResponse(false);\r\n  newTom:Tom = new Tom(\"\",\"\",0);\r\n  addNewTom:NewTom = new NewTom(\"\",\"\",\"\",0);\r\n\r\n  privileges:DropdownMenu = new DropdownMenu(\"Privilege Level\");\r\n\r\n  options:Option[] = [\r\n    {id:1, name:\"Admin\"},\r\n    {id:2, name:\"User\"}\r\n  ];\r\n\r\n  setDropdownText(name:string){\r\n    this.privileges.name = name;\r\n  }\r\n\r\n  constructor(private registerTomService:RegisterTomService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  addTom(){\r\n    for(var item of this.options){\r\n      console.trace('Check for assigned option.');\r\n      if(item.name == this.privileges.name){\r\n        console.log('Options match in getTom().');\r\n        this.addNewTom.privId = item.id;\r\n      }\r\n    }\r\n    \r\n    if(this.addNewTom.privId != 0){\r\n      if(this.addNewTom.password == this.addNewTom.passwordConfirm){\r\n        console.debug('Passwords match in getTom().');\r\n        new NewTom(\r\n          this.addNewTom.username,\r\n          this.addNewTom.password,\r\n          this.addNewTom.passwordConfirm,\r\n          this.addNewTom.privId\r\n        )\r\n\r\n        console.warn('Calling addFreshNewTom()');\r\n\r\n        this.registerTomService.addFreshNewTom( this.addNewTom.username,\r\n          this.addNewTom.password,\r\n          this.addNewTom.passwordConfirm,\r\n          this.addNewTom.privId).subscribe(\r\n            data=>{\r\n              /* \r\n                Route back to login \r\n                AND \r\n                at login, \r\n                notify user of result w/ an HTML message\r\n              */\r\n             this.feedback = data;\r\n             if(this.feedback){\r\n              console.log('Received response from servlet with the following data: ',data);\r\n             } else {\r\n              console.log('send an addFreshNewTom with response: ',data);\r\n             }\r\n            },\r\n            error=>{\r\n              console.error(error.message);\r\n            }\r\n          );\r\n\r\n      } else {\r\n        /* */\r\n        console.debug('Passwords do not match.');\r\n      }\r\n    } else {\r\n      console.debug('No privId is assigned to addNewTom.');\r\n    }\r\n  }\r\n\r\n  checkPrivSelection(name:string){\r\n\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"  <!-- TOP NAVBAR START-->\\r\\n  <nav class=\\\"navbar navbar-expand-lg bg-dark navbar-dark fixed-top col-12 clearfix\\\">\\r\\n      <a class=\\\"navbar-brand\\\" \\r\\n        style=\\\"color:whitesmoke\\\">\\r\\n           AskTOM    </a>\\r\\n      <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n      </ul>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-10\\\"></div>\\r\\n        <div class=\\\"col-2\\\">\\r\\n          \\r\\n          <a routerLinkActive=\\\"active\\\" routerLink=\\\"/home\\\">Home</a> \\r\\n         \\r\\n        </div>\\r\\n    </div>\\r\\n  </nav>\\r\\n\\r\\n<div *ngFor=\\\"let response of responses\\\">\\r\\n    <div class=\\\"container row responseSection\\\">\\r\\n        <div class=\\\"col-sm-2\\\">{{response.votes}}</div>\\r\\n        <div class=\\\"col-sm-8\\\">{{response.content}}</div>\\r\\n        <div class=\\\"col-sm-2\\\"></div>\\r\\n      </div>\\r\\n</div>\\r\\n\\r\\n  <!-- NAVBAR END -->\\r\\n  <!-- NavBar with Nav Pills for cleanish looking navigation on the bottom of the page -->\\r\\n  <nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark fixed-bottom col-12\\\"></nav>\"","import { ResponseService } from './../../services/response.service';\r\nimport { Topic } from './../home/topic/topic';\r\nimport { TopicToResponseService } from './../../services/topic-to-response.service';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { NavbarComponent } from '../navbar/navbar.component';\r\nimport { Response } from './response/response';\r\n\r\n@Component({\r\n  selector: 'app-response',\r\n  templateUrl: './response.component.html',\r\n  styleUrls: ['./response.component.css']\r\n})\r\nexport class ResponseComponent implements OnInit {\r\n\r\n  topic: Topic;\r\n  responses:Response[]=[];\r\n\r\n  constructor( private data: TopicToResponseService,\r\n    private responseService:ResponseService,\r\n    private getResponsefromTopic: TopicToResponseService) { }\r\n\r\n  ngOnInit() {\r\n    this.data.currentTopic.subscribe(\r\n      data => {\r\n        console.info('Inside ngOnInit() of response.component.ts');\r\n        // listen for changes to current topic\r\n        this.topic = data;\r\n        if(this.topic != null){\r\n          console.info('Topic passed to response component with Id: ', this.topic.id);\r\n          this.responseService.getResponses(this.topic).subscribe(\r\n            data => {\r\n              // Handle response \"responses\"\r\n              if (data != null){\r\n                console.trace('Assigning servlet response to responses');\r\n                this.responses = data;\r\n              } else {\r\n                console.debug('Topic has no responses');\r\n              }\r\n            },\r\n            error => {\r\n              console.error('Servlet response error');\r\n            }\r\n          );\r\n        }\r\n        else {\r\n          console.debug('Topic passed from home component was null');\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Logged in tom's result\r\n */\r\nexport class ActiveTom{\r\n    constructor(\r\n        public username:string,\r\n        public privId:number\r\n    ){}\r\n}","export class NewTom {\r\n    constructor(\r\n        public username:string,\r\n        public password:string,\r\n        public passwordConfirm:string,\r\n        public privId:number\r\n    ){}\r\n}","export class Tom {\r\n    constructor(\r\n        public username:string,\r\n        public password:string,\r\n        public privId:number\r\n    ){}\r\n}","module.exports = \"\"","module.exports = \"\\r\\n<div class=\\\"container\\\">\\r\\n  <div class=\\\"col-sm-3\\\"></div>\\r\\n  <div class=\\\"col-sm-6\\\" id=\\\"topic-name\\\" ></div>\\r\\n  <div class=\\\"col-sm-3\\\"></div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-topic-list',\r\n  templateUrl: './topic-list.component.html',\r\n  styleUrls: ['./topic-list.component.css']\r\n})\r\nexport class TopicListComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { LoginComponent } from './components/login/login.component';\r\nimport { Routes } from 'node_modules/@angular/router';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { ResponseComponent } from './components/response/response.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\n\r\nexport const appRoutes: Routes = [\r\n    {\r\n        path: 'register',\r\n        component: RegisterComponent\r\n    },\r\n    {\r\n        path: 'responses',\r\n        component: ResponseComponent\r\n    },\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent\r\n    },\r\n    {\r\n        path: 'home',\r\n        component: HomeComponent\r\n    },\r\n    {\r\n        path: '**',\r\n        redirectTo: 'home',\r\n        pathMatch: 'full'\r\n    },\r\n    {\r\n        path: '',\r\n        component: HomeComponent\r\n    }\r\n]","import { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Tom } from '../components/tom/tom';\r\nimport { RegisterResponse } from '../components/register/register-response/registerResponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterTomService {\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json'})\r\n  }\r\n\r\n  addFreshNewTom(username:string, password:string, passwordConfirm:string, privId:number){\r\n    let body = new HttpParams();\r\n    /* Point to tomcat server */\r\n    let headers = new HttpHeaders().set(\r\n      'Content-Type', 'application/x-www-form-urlencoded'\r\n    );\r\n\r\n      body = body.set('username', username);\r\n      body = body.set('password', password);\r\n      body = body.set('passwordConfirm', passwordConfirm)\r\n      body = body.set('privId', privId.toString());\r\n      /* Point to tomcat server */\r\n    return this.http.post<RegisterResponse>(\"http://18.219.234.217:8085/AskTOM/RegisterServlet\",\r\n    body,\r\n    {headers:headers});\r\n  }\r\n  \r\n}\r\n","import { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Response } from './../components/response/response/response';\r\nimport { Injectable } from '@angular/core';\r\nimport { Topic } from '../components/home/topic/topic';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResponseService {\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json'})\r\n  }\r\n\r\n  getResponses(topic:Topic){\r\n    console.trace('Entering getResponses.');\r\n    let body = new HttpParams();\r\n    /* Point to tomcat server */\r\n    let headers = new HttpHeaders().set(\r\n      'Content-Type', 'application/x-www-form-urlencoded'\r\n    );\r\n    console.trace('assigning to body.');\r\n    body = body.set('topicId', topic.id.toString());\r\n\r\n    console.trace('Posting response.');\r\n    return this.http.post<Response[]>(\"http://18.219.234.217:8085/AskTOM/GetAllResponsesForTopicServlet\",\r\n    body,\r\n    {headers:headers});\r\n  }\r\n\r\n}\r\n","import { ActiveTom } from './../components/tom/activeTom';\r\nimport { Topic } from './../components/home/topic/topic';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TomService {\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json'})\r\n  }\r\n\r\n  getTopics(){\r\n    return this.http.get<Topic[]>(\"http://18.219.234.217:8085/AskTOM/GetAllTopicsServlet\");\r\n  }\r\n  \r\n  getTom(username:string, password:string){\r\n    let body = new HttpParams();\r\n    /* Point to tomcat server */\r\n    let headers = new HttpHeaders().set(\r\n      'Content-Type', 'application/x-www-form-urlencoded'\r\n    );\r\n\r\n      body = body.set('username', username);\r\n      body = body.set('password', password);\r\n      /* Point to tomcat server */\r\n    return this.http.post<ActiveTom>(\"http://18.219.234.217:8085/AskTOM/LoginServlet\",\r\n    body,\r\n    {headers:headers});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Topic } from '../components/home/topic/topic';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TopicToResponseService {\r\n\r\n  topic:Topic= new Topic(0,\"\",0);\r\n\r\n  private topicToComponent = new BehaviorSubject(new Topic(0,\"\",0));\r\n  currentTopic = this.topicToComponent.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  changeTopic(topic:Topic){\r\n    console.debug('Topic name in changeTopic: ',topic.id, ', ',topic.name, ', ', topic.privId);\r\n    console.warn('Calling topicToComponent.next.');\r\n    this.topicToComponent.next(topic);\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n\r\n"],"sourceRoot":""}